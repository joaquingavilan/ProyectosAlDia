import unittest
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from Aplicacion.models import *
from datetime import date

class DevolucionMaterialesViewTests(TestCase):
    def setUp(self):
        # Configuración inicial
        self.client = Client()

        # Crear un usuario y asignarlo como ingeniero
        self.user = User.objects.create_user(username='testuser', password='12345')
        self.personal = Personal.objects.create(user=self.user)

        # Crear una ciudad
        self.ciudad = Ciudad.objects.create(nombre='Ciudad Test')

        # Crear un cliente
        self.cliente = Cliente.objects.create(
            nombre='Cliente Test',
            ruc='1234567890',
            email='cliente@test.com',
            tipo_persona='Juridica',
            direccion='Dirección del cliente'
        )

        # Crear un proyecto
        self.proyecto = Proyecto.objects.create(
            nombre='Proyecto Test',
            cliente=self.cliente,
            ciudad=self.ciudad
        )

        # Crear una obra y asignarla al usuario ingeniero
        self.obra = Obra.objects.create(
            proyecto=self.proyecto,
            encargado=self.user,
            fecha_inicio=date.today(),
            estado='F'  # Estado finalizado
        )

        # Crear instancias necesarias para Material
        self.marca = Marca.objects.create(nombre='Marca Test')
        self.proveedor = Proveedor.objects.create(
            nombre='Proveedor Test',
            ruc='1234567890',
            email='proveedor@test.com',
            direccion='Dirección del proveedor',
            ciudad=self.ciudad,
            pagina_web='proveedor.com',
            telefono='123456789',
            observaciones='Ninguna'
        )
        self.unidad_medida = UnidadMedida.objects.create(
            descripcion='Unidad de prueba',
            nombre='UT'
        )

        # Crear materiales
        self.material1 = Material.objects.create(
            nombre='Material 1',
            marca=self.marca,
            id_proveedor=self.proveedor,
            medida=self.unidad_medida,
            minimo=10,
            unidades_stock=50,
            fotografia=None
        )
        self.material2 = Material.objects.create(
            nombre='Material 2',
            marca=self.marca,
            id_proveedor=self.proveedor,
            medida=self.unidad_medida,
            minimo=15,
            unidades_stock=30,
            fotografia=None
        )

        # Crear un pedido
        self.pedido = Pedido.objects.create(
            obra=self.obra,
            fecha_pedido=date.today(),
            estado='E'  # Estado entregado
        )

        # Asociar materiales al pedido
        self.material_pedido1 = MaterialPedido.objects.create(
            pedido=self.pedido,
            material=self.material1,
            cantidad=10
        )
        self.material_pedido2 = MaterialPedido.objects.create(
            pedido=self.pedido,
            material=self.material2,
            cantidad=20
        )

        # URLs para las vistas
        self.ver_obras_terminadas_url = reverse('ver_obras_terminadas')
        self.ver_pedidos_obra_url = reverse('ver_pedidos_obra', args=[self.obra.id])
        self.ver_pedido_a_devolver_url = reverse('ver_pedido_a_devolver', args=[self.pedido.id])
        self.confirmar_devolucion_url = reverse('confirmar_devolucion')

    def test_ver_obras_terminadas(self):
        # Prueba para ver obras terminadas
        self.client.login(username='testuser', password='12345')
        response = self.client.get(self.ver_obras_terminadas_url)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'pantallas_ing/ver_obras_terminadas.html')
        self.assertContains(response, self.obra.nombre)

    def test_ver_pedidos_obra(self):
        # Prueba para ver pedidos de una obra
        self.client.login(username='testuser', password='12345')
        response = self.client.get(self.ver_pedidos_obra_url)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'pantallas_ing/ver_pedidos_obra.html')
        self.assertContains(response, self.pedido.id)
        self.assertContains(response, self.material1.nombre)
        self.assertContains(response, self.material2.nombre)

    def test_ver_pedido_a_devolver(self):
        # Prueba para ver detalles de un pedido a devolver
        self.client.login(username='testuser', password='12345')
        response = self.client.get(self.ver_pedido_a_devolver_url)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'pantallas_ing/ver_pedido_a_devolver.html')
        self.assertContains(response, self.material1.nombre)
        self.assertContains(response, self.material2.nombre)

    def test_confirmar_devolucion_post(self):
        # Prueba para confirmar la devolución de materiales
        self.client.login(username='testuser', password='12345')
        post_data = {
            'pedido_id': self.pedido.id,
            'cantidad_{}'.format(self.material1.id): 5,
            'cantidad_{}'.format(self.material2.id): 10
        }
        response = self.client.post(self.confirmar_devolucion_url, data=post_data)
        self.assertRedirects(response, self.ver_pedidos_obra_url)
        
        # Verificar que la devolución se haya creado correctamente
        devoluciones = Devolucion.objects.filter(pedido=self.pedido)
        self.assertEqual(devoluciones.count(), 1)
        devolucion = devoluciones.first()
        self.assertEqual(devolucion.estado, 'P')
        
        materiales_devueltos = MaterialDevuelto.objects.filter(devolucion=devolucion)
        self.assertEqual(materiales_devueltos.count(), 2)
        self.assertTrue(materiales_devueltos.filter(material=self.material1, cantidad=5).exists())
        self.assertTrue(materiales_devueltos.filter(material=self.material2, cantidad=10).exists())

if __name__ == '__main__':
    unittest.main()
